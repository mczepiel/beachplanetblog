montageDefine("bfd16e7","core/paths",{dependencies:["core/core","collections/weak-map","collections/map","frb/parse","frb/evaluate","frb/assign","frb/observe","frb/bind","frb/compile-observer","frb/scope","frb/observers"],factory:function(e){var t=e("core/core").Montage,n=e("collections/weak-map"),i=e("collections/map"),r=e("frb/parse"),a=e("frb/evaluate"),s=e("frb/assign");e("frb/observe"),e("frb/bind");var o=e("frb/compile-observer"),l=e("frb/scope"),u=e("frb/observers"),c=u.autoCancelPrevious,h=new n,d={getPath:{value:function(e,t,n,i){return a(e,this,t||this,n,i)}},setPath:{value:function(e,t,n,i,r){return s(this,e,t,n||this,i,r)}},observePath:{value:function(e,t){var n=r(e),i=o(n);return i(c(t),new l(this))}},addRangeAtPathChangeListener:{value:function(e,t,n){function i(e,i,r){if(t[n])t[n](e,i,r);else{if(!t.call)throw Error("Can't dispatch range change to "+t);t.call(null,e,i,r)}}n=n||"handleRangeChange";var r=[];return this.addPathChangeListener(e,function(e){return e=e||[],i(e.slice(),r.slice(),0),r=e,e.addRangeChangeListener(i)})}},getPathChangeDescriptors:{value:function(){return h.has(this)||h.set(this,{}),h.get(this)}},getPathChangeDescriptor:{value:function(e,n,r){var a=t.getPathChangeDescriptors.call(this);return Object.owns(a,e)||(a[e]={willChangeListeners:new i,changeListeners:new i}),a=a[e],a=r?a.willChangeListeners:a.changeListeners,a.has(n)||a.set(n,{path:e,handler:n,beforeChange:r,cancel:Function.noop}),a.get(n)}},addPathChangeListener:{value:function(e,n,i,a){var s=this;n=n||Function.noop;var u=t.getPathChangeDescriptor.call(this,e,n,a);u.cancel();var h,d,p,m=r(e);if(n===Function.noop)p=function(t){if(d)throw Error("Path change handler needs a handler because it emits new values when the source changes: "+JSON.stringify(e));d=!0,h=t};else if(i)p=function(t){return n[i].call(n,t,e,s)};else if(n.handlePathChange)p=function(t){return n.handlePathChange.call(n,t,e,s)};else{if("function"!=typeof n)throw Error("Can't recognize handler type: "+n+". Must be function or delegate implementing handlePathChange.");p=function(t){return n.call(s,t,e,s)}}var f=o(m),v=f(c(p),new l(this));return u.cancel=v,d?h:v}},removePathChangeListener:{value:function(e,n,i){n=n||Function.noop;var r=t.getPathChangeDescriptors.call(this),a=i?"willChangeListeners":"changeListeners";if(!Object.owns(r,e))throw Error("Can't find "+a+" for "+JSON.stringify(e));var s=r[e],o=s[a];if(!o.has(n))throw Error("Can't find "+a+" for "+JSON.stringify(e));var l=o.get(n);l.cancel(),o["delete"](n),0===s.willChangeListeners.length&&0===s.changeListeners.length&&delete r[e];for(var u in r)return;h["delete"](this)}},addBeforePathChangeListener:{value:function(e,n,i){return t.addPathChangeListener.call(this,e,n,i,!0)}},removeBeforePathChangeListener:{value:function(e,n){return t.removePathChangeListener.call(this,e,n,!0)}}};t.defineProperties(t,d),t.defineProperties(t.prototype,d)}});